#!/usr/bin/env python -u
import array
import json.encoder
import serial
import struct
import sys
import time

DIRECT_COMMAND_REPLY = 0x00
opINPUT_READ = 0x9A
PRIMPAR_VALUE = 0x3F
PRIMPAR_SHORT = 0x00
PRIMPAR_CONST = 0x00
PRIMPAR_VARIABEL = 0x40
PRIMPAR_GLOBAL = 0x20
PRIMPAR_INDEX = 0x1F

LC0 = lambda v: ((v & PRIMPAR_VALUE) | PRIMPAR_SHORT | PRIMPAR_CONST)
GV0 = lambda i: ((i & PRIMPAR_INDEX) | PRIMPAR_SHORT | PRIMPAR_VARIABEL | PRIMPAR_GLOBAL)

encoder = json.encoder.JSONEncoder()

def make_read_command(seq, port):
  return ''.join(chr(c) for c in [11, 0, seq, 0,
      DIRECT_COMMAND_REPLY,
      1, 0,
      opINPUT_READ, LC0(0), LC0(port), LC0(0), LC0(0), GV0(0)
      ])

def read_sensors(chan, ports):
  ret = {}
  for i in range(len(ports)):
    size_bytes = chan.read(2)
    (size, ) = struct.unpack('<H', size_bytes)
    payload = chan.read(size)

    # Extreeeemely cheap :)
    try:
      ret[ports[ord(payload[0])]] = ord(payload[3])
    except IndexError:
      pass

  return ret

# Command == size (2), serial (2), type (1), params(N)

SENSORS = ['dist', 'light', 'btn', 'sound']

chan = None

def read():
  global chan

  try:
    if not chan:
      chan = serial.Serial('/dev/tty.EV3-SerialPort-1')
      chan.baudrate = 115200

    chan.write(make_read_command(0, 0) +
                make_read_command(1, 1) +
                make_read_command(2, 2) +
                make_read_command(3, 3))
    return read_sensors(chan, SENSORS)
  except (OSError, serial.serialutil.SerialException):
    chan = None
    time.sleep(1)
    return { n: 50 for n in SENSORS }

try:
  while True:
    sys.stdout.write(encoder.encode(read()) + '\n')
    sys.stdout.flush()
except KeyboardInterrupt:
  pass
